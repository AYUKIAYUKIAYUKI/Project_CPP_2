//============================================================================
// 
// アイテム [item.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "item.h"
#include "bounding_sphere.h"
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CItem::CItem() :
	CObject_X{ LAYER::MIDDLE },
	m_fCorrectCoef{ 0.0f },
	m_fDirection{ 0.0f },
	m_RotTarget{ VEC3_INIT },
	m_PosTarget{ VEC3_INIT },
	m_pBndSphere{ DBG_NEW CBounding_Sphere() }
{

}

//============================================================================
// デストラクタ
//============================================================================
CItem::~CItem()
{
	// 球バウンディングの破棄
	if (m_pBndSphere != nullptr)
	{
		// メモリを解放
		delete m_pBndSphere;

		// ポインタを初期化
		m_pBndSphere = nullptr;
	}
}

//============================================================================
// 初期設定
//============================================================================
HRESULT CItem::Init()
{
	// Xオブジェクトクラスの初期設定
	if (FAILED(CObject_X::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CItem::Uninit()
{
	// Xオブジェクトクラスの終了処理
	CObject_X::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CItem::Update()
{
	// 球バウンディングに中心点セット
	m_pBndSphere->SetCenterPos(GetPos());

	// Xオブジェクトクラスの更新処理
	CObject_X::Update();

#if 0
#ifdef _DEBUG
	ImGui::SetNextWindowPos({ 0, 0 }, ImGuiCond_FirstUseEver);
	ImGui::Begin("Block Param");
	ImGui::Text("Size::X %.2f:Y %.2f:Z %.2f", GetSize().x, GetSize().y, GetSize().z);
	ImGui::Text("Rot:X %.2f:Y %.2f:Z %.2f", GetRot().x * (180 / D3DX_PI), GetRot().y * (180 / D3DX_PI), GetRot().z * (180 / D3DX_PI));
	ImGui::Text("Pos:X %.2f:Y %.2f:Z %.2f", GetPos().x, GetPos().y, GetPos().z);
	ImGui::End();
#endif // _DEBUG
#endif
}

//============================================================================
// 描画処理
//============================================================================
void CItem::Draw()
{
	// Xオブジェクトクラスの描画処理
	CObject_X::Draw();
}

//============================================================================
// 半径を取得
//============================================================================
float CItem::GetRadius() const
{
	return m_pBndSphere->GetRadius();
}

//============================================================================
// 半径を設定
//============================================================================
void CItem::SetRadius(float fRadius)
{
	m_pBndSphere->SetRadius(fRadius);
}

//============================================================================
// 補間強度を設定
//============================================================================
void CItem::SetCorrectCoef(float fCoef)
{
	m_fCorrectCoef = fCoef;
}

//============================================================================
// 方角を取得
//============================================================================
const float& CItem::GetDirection() const
{
	return m_fDirection;
}

//============================================================================
// 方角を設定
//============================================================================
void CItem::SetDirection(float fDirection)
{
	m_fDirection = fDirection;
}

//============================================================================
// 目標向きを取得
//============================================================================
const D3DXVECTOR3& CItem::GetRotTarget() const
{
	return m_RotTarget;
}

//============================================================================
// 目標向きを設定
//============================================================================
void CItem::SetRotTarget(D3DXVECTOR3 RotTarget)
{
	m_RotTarget = RotTarget;
}

//============================================================================
// 目標座標を取得
//============================================================================
const D3DXVECTOR3& CItem::GetPosTarget() const
{
	return m_PosTarget;
}

//============================================================================
// 目標座標を設定
//============================================================================
void CItem::SetPosTarget(D3DXVECTOR3 PosTarget)
{
	m_PosTarget = PosTarget;
}