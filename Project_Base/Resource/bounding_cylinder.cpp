//============================================================================
//
// 円柱バウンディング [bouding_cylinder.cpp]
// Author : 福田歩希
//
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "bounding_cylinder.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
//
// publicメンバ
//
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CBounding_Cylinder::CBounding_Cylinder() :
	CBounding_Volume{},
	m_fRadius{ 0.0f },
#ifdef _DEBUG
	m_fHeight{ 0.0f },
	m_pRenderCylinder{ CRender_Cylinder::Create() }
#else
	m_fHeight{ 0.0f }
#endif // _DEBUG
{

}

//============================================================================
// デストラクタ
//============================================================================
CBounding_Cylinder::~CBounding_Cylinder()
{
	// 円柱表示を破棄予約
	if (m_pRenderCylinder != nullptr)
	{
		m_pRenderCylinder->SetRelease();
		m_pRenderCylinder = nullptr;
	}
}

//============================================================================
// 中心点を設定
//============================================================================
void CBounding_Cylinder::SetCenterPos(D3DXVECTOR3 Pos)
{
	// バウンディング基底クラスの持つ中心点にセット
	CBounding_Volume::SetCenterPos(Pos);

	// 円柱表示の持つシンクロ座標にセット
	m_pRenderCylinder->SetCenterSyncPos(Pos);
}

//============================================================================
// 半径を取得
//============================================================================
const float& CBounding_Cylinder::GetRadius() const
{
	return m_fRadius;
}

//============================================================================
// 半径を設定
//============================================================================
void CBounding_Cylinder::SetRadius(float fRad)
{
	// 自身の半径にセット
	m_fRadius = fRad;

	// 円柱表示の持つシンクロ半径にセット
	m_pRenderCylinder->SetSyncRadius(fRad);
}

//============================================================================
// 高さを取得
//============================================================================
const float& CBounding_Cylinder::GetHeight() const
{
	return m_fHeight;
}

//============================================================================
// 高さを設定
//============================================================================
void CBounding_Cylinder::SetHeight(float fHeight)
{
	// 自身の高さにセット
	m_fHeight = fHeight;

	// 円柱表示の持つシンクロ高さにセット
	m_pRenderCylinder->SetSyncHeight(fHeight);
}