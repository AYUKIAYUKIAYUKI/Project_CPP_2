//============================================================================
// 
// スフィア表示 [render_sphere.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "render_sphere.h"
#include "object_X.h"

// デバイス取得用
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// 描画優先度指定コンストラクタ
//============================================================================
CRender_Sphere::CRender_Sphere(LAYER Priority) :
	CRender_Collision{ Priority },
	m_fSyncRadius{ 0.0f },
	m_pSphere{ CObject_X::Create(Priority, CX_Manager::TYPE::RENDER_SPHERE) }
{

}

//============================================================================
// デストラクタ
//============================================================================
CRender_Sphere::~CRender_Sphere()
{
	// スフィア表示を破棄予約
	if (m_pSphere != nullptr)
	{
		m_pSphere->SetRelease();
	}
}

//============================================================================
// 初期設定
//============================================================================
HRESULT CRender_Sphere::Init()
{
	// 判定表示の初期設定
	if (FAILED(CRender_Collision::Init()))
	{
		return E_FAIL;
	}

	// 表示の透明度を設定
	m_pSphere->SetCol({ 1.0f, 1.0f, 1.0f, 0.5f });
	m_pSphere->SetUseCol(true);

	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CRender_Sphere::Uninit()
{
	// 判定表示の終了処理
	CRender_Collision::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CRender_Sphere::Update()
{
	// ウィンドウを表示
	ImGui::SetNextWindowPos({ 0, 0 }, ImGuiCond_FirstUseEver);
	if (ImGui::Begin("Sphere"))
	{
		ImGui::Text("Pos:X %.1f:Y %.1f:Z %.1f", m_pSphere->GetPos().x, m_pSphere->GetPos().y, m_pSphere->GetPos().z);
	}
	ImGui::End();

	if (m_pRef != nullptr)
	{ // 対象オブジェクトが設定されていたら

		// 判定のサイズに合わせてスケールを拡大
		const float& fRad = m_pRef->GetRadius();
		const Vec3& Scale = { fRad, fRad, fRad };
		m_pSphere->SetScale(Scale);

		// オブジェクトの座標に判定を表示
		m_pSphere->SetPos(m_pRef->GetPos());
	}
	else
	{ // 対象オブジェクトが設定されていない

		// 判定のサイズに合わせてスケールを拡大
		const Vec3& Scale = { m_fSyncRadius, m_fSyncRadius, m_fSyncRadius };
		m_pSphere->SetScale(Scale);

		// オブジェクトの座標に判定を表示
		m_pSphere->SetPos(m_CenterSyncPos);
	}
}

//============================================================================
// 描画処理
//============================================================================
void CRender_Sphere::Draw()
{

}

//============================================================================
// 半径を設定
//============================================================================
void CRender_Sphere::SetSyncRadius(float fRadius)
{
	m_fSyncRadius = fRadius;
}

//============================================================================
// モデルを変更
//============================================================================
void CRender_Sphere::ChangeModel(CX_Manager::TYPE Type)
{
	m_pSphere->BindModel(Type);
}

//============================================================================
// 生成
//============================================================================
CRender_Sphere* CRender_Sphere::Create()
{
	// 判定表示を生成
	CRender_Sphere* pRender_Collision = DBG_NEW CRender_Sphere(LAYER::FRONT);

	// 生成失敗
	if (pRender_Collision == nullptr)
	{
		assert(false && "スフィア表示の生成に失敗しました");
	}

	// 判定表示の初期設定
	pRender_Collision->Init();

	return pRender_Collision;
}

//============================================================================
// 生成
//============================================================================
CRender_Sphere* CRender_Sphere::Create(CObject_X* pRef)
{
	// 判定表示を生成
	CRender_Sphere* pRender_Collision = DBG_NEW CRender_Sphere(LAYER::FRONT);

	// 生成失敗
	if (pRender_Collision == nullptr)
	{
		assert(false && "スフィア表示の生成に失敗しました");
	}

	// 判定表示の初期設定
	pRender_Collision->Init();

	// 対象オブジェクトの設定
	pRender_Collision->SetRefObj(pRef);

	return pRender_Collision;
}