//============================================================================
// 
// 球表示 [render_sphere.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "render_sphere.h"
#include "object_X.h"
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// 描画優先度指定コンストラクタ
//============================================================================
CRender_Sphere::CRender_Sphere(LAYER Priority) :
	CRender_Collision{ Priority },
	m_fSyncRadius{ 0.0f },
	m_pSphereModel{ nullptr }
{
	// 球モデルを生成
	m_pSphereModel = CObject_X::Create(Priority, CX_Manager::TYPE::RENDER_SPHERE);
}

//============================================================================
// デストラクタ
//============================================================================
CRender_Sphere::~CRender_Sphere()
{
	// 球モデルを破棄予約
	if (m_pSphereModel != nullptr)
	{
		m_pSphereModel->SetRelease();
		m_pSphereModel = nullptr;
	}
}

//============================================================================
// 初期設定
//============================================================================
HRESULT CRender_Sphere::Init()
{
	// 判定表示クラスの初期設定
	if (FAILED(CRender_Collision::Init()))
	{
		return E_FAIL;
	}

	// 表示の初期透明度を設定
	m_pSphereModel->SetCol({ 1.0f, 1.0f, 1.0f, 0.5f });

	// 設定カラーを使用する
	m_pSphereModel->SetUseCol(true);

	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CRender_Sphere::Uninit()
{
	// 判定表示クラスの終了処理
	CRender_Collision::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CRender_Sphere::Update()
{
	// バウンディングのサイズに合わせて球モデルのスケールをセット
	const Vec3& Scale = { m_fSyncRadius, m_fSyncRadius, m_fSyncRadius };
	m_pSphereModel->SetScale(Scale);

	// バウンディングの中心点に合わせて球モデルの座標をセット
	m_pSphereModel->SetPos(m_CenterSyncPos);
}

//============================================================================
// 描画処理
//============================================================================
void CRender_Sphere::Draw()
{
	/* オーバーライド用 */
}

//============================================================================
// シンクロ半径を設定
//============================================================================
void CRender_Sphere::SetSyncRadius(float fRadius)
{
	m_fSyncRadius = fRadius;
}

//============================================================================
// 生成
//============================================================================
CRender_Sphere* CRender_Sphere::Create()
{
	// 球表示を生成
	CRender_Sphere* pNew = DBG_NEW CRender_Sphere(LAYER::FRONT);

	// 生成失敗
	if (pNew == nullptr)
	{
		assert(false && "球表示の生成に失敗しました");
	}

	// 球表示の初期設定
	pNew->Init();

	return pNew;
}