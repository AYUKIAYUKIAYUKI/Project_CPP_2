//============================================================================
//
// プレイヤーステートマネージャー [player_state_manager.h]
// Author : 福田歩希
//
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "player_state_manager.h"

// デバッグ表示用
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace player_state_manager;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// デフォルトコンストラクタ
//============================================================================
CPlayer_State_Manager::CPlayer_State_Manager() :
	m_pState{ nullptr }
{

}

//============================================================================
// デストラクタ
//============================================================================
CPlayer_State_Manager::~CPlayer_State_Manager()
{

}

//============================================================================
// 破棄
//============================================================================
void CPlayer_State_Manager::Release()
{
	if (this != nullptr)
	{
		// 終了処理
		this->Uninit();

		// メモリを解放
		delete this;
	}
}

//============================================================================
// 更新処理
//============================================================================
void CPlayer_State_Manager::Update()
{
	// ステートの更新
	m_pState->Update();

#ifdef _DEBUG

	// ステートの中身がどの派生クラスか表示
	CRenderer::GetInstance()->SetDebugString("現在のプレイヤーステート : 【" + static_cast<std::string>(typeid(*m_pState).name()) + "】");
	
#endif	// _DEBUG
}

//============================================================================
// 状態を設定
//============================================================================
void CPlayer_State_Manager::SetState(CState* pState)
{
	m_pState = pState;
}

//============================================================================
// 生成
//============================================================================
CPlayer_State_Manager* CPlayer_State_Manager::Create()
{
	// プレイヤーステートマネージャーを生成
	CPlayer_State_Manager* pNewInstance = DBG_NEW CPlayer_State_Manager();

	if (pNewInstance == nullptr)
	{ // 生成失敗
		assert(false && "プレイヤーステートマネージャーの生成に失敗");
	}

	// 初期設定
	pNewInstance->Init();

	return pNewInstance;
}

//============================================================================
// 
// privateメンバ
// 
//============================================================================

//============================================================================
// 初期設定
//============================================================================
HRESULT CPlayer_State_Manager::Init()
{
	// 初期状態を生成
	if (m_pState == nullptr)
	{
		m_pState = DBG_NEW CPlayer_State_Default();

		return S_OK;
	}

	return E_FAIL;
}

//============================================================================
// 終了処理
//============================================================================
void CPlayer_State_Manager::Uninit()
{
	if (m_pState != nullptr)
	{
		// メモリを解放
		delete m_pState;

		// ポインタを初期化
		m_pState = nullptr;
	}
}