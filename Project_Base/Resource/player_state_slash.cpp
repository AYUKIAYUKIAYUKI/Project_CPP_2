////============================================================================
////
//// プレイヤー斬撃ステート [player_state_slash.cpp]
//// Author : 福田歩希
////
////============================================================================
//
////****************************************************
//// インクルードファイル
////****************************************************
//#include "player_state_slash.h"
//#include "player_state_default.h"
//#include "player_state_damage.h"
//
//// フィールドサイズ取得用
//#include "field_manager.h"
//
//// インプット取得用
//#include "manager.h"
//
////****************************************************
//// usingディレクティブ
////****************************************************
//using namespace abbr;
//
////============================================================================
//// 
//// publicメンバ
//// 
////============================================================================
//
////============================================================================
//// コンストラクタ
////============================================================================
//CPlayer_State_Slash::CPlayer_State_Slash() :
//	CPlayer_State{},
//	m_bDirection{ false },
//	m_nSlashDuration{ 0 }
//{
//	// 左方向を入力していたら
//	if (CManager::GetKeyboard()->GetPress(DIK_A) || CManager::GetKeyboard()->GetRelease(DIK_A))
//	{
//		m_bDirection = 0;
//	}
//	else
//	{
//		m_bDirection = 1;
//	}
//
//	// Y軸方向の加速度を無くす
//	m_pCharacter->SetVelY(0.0f);
//}
//
////============================================================================
//// デストラクタ
////============================================================================
//CPlayer_State_Slash::~CPlayer_State_Slash()
//{
//
//}
//
////============================================================================
//// 更新処理
////============================================================================
//void CPlayer_State_Slash::Update()
//{
//	// 目標座標をダッシュ方向に増加
//	SetPosTarget_Unnamed();
//
//	// 継続期間をカウントアップ
//	m_nSlashDuration++;
//
//	// 継続期間が最大に到達で
//	if (m_nSlashDuration >= MAX_DASH_DURATION)
//	{
//		// 通常状態へ
//		To_Default();
//	}
//}
//
////============================================================================
//// 通常状態へ
////============================================================================
//void CPlayer_State_Slash::To_Default()
//{
//	if (GetNextState() == nullptr)
//	{
//		SetNextState(DBG_NEW CPlayer_State_Default());
//	}
//}
//
////============================================================================
//// ダメージ状態へ
////============================================================================
//void CPlayer_State_Slash::To_Damage()
//{
//	if (GetNextState() == nullptr)
//	{
//		SetNextState(DBG_NEW CPlayer_State_Damage());
//	}
//}
//
////============================================================================
//// 
//// privateメンバ
//// 
////============================================================================
//
////============================================================================
//// 目標座標をダッシュ方向に増加
////============================================================================
//void CPlayer_State_Slash::SetPosTarget_Unnamed()
//{
//	// 現在の方角を取得
//	float fDirection = m_pCharacter->GetDirection();
//
//	// 設定されている移動方向に方角を増加
//	if (m_bDirection)
//	{
//		fDirection += m_pCharacter->GetMoveSpeed() * 5.0f;
//	}
//	else
//	{
//		fDirection += m_pCharacter->GetMoveSpeed() * -5.0f;
//	}
//
//	m_pCharacter->SetDirection(fDirection);
//
//	Vec3 NewPosTarget = m_pCharacter->GetPosTarget();					// 新規目標座標を作成
//	NewPosTarget.x = cosf(fDirection) * CField_Manager::FIELD_RADIUS;	// X方向の座標を設定
//	NewPosTarget.z = sinf(fDirection) * CField_Manager::FIELD_RADIUS;	// Z方向の座標を設定
//	m_pCharacter->SetPosTarget(NewPosTarget);							// 目標座標を反映
//}