//============================================================================
// 
// 閃光 [bright.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "bright.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//****************************************************
// 静的メンバ変数の初期化
//****************************************************
WORD CBright::m_nCntGenerateSpan = 0;	// 生成スパンのカウント

// 基礎パラメータの展開
//JSON CBright::m_InitParam = utility::OpenJsonFile("Data\\JSON\\ENVIRONMENT\\bright.json");

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CBright::CBright() :
	CMotion_Set{ LAYER::DEFAULT }
{

}

//============================================================================
// デストラクタ
//============================================================================
CBright::~CBright()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CBright::Init()
{
	// モーションオブジェクトの初期設定
	if (FAILED(CMotion_Set::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CBright::Uninit()
{
	// モーションセット終了処理
	CMotion_Set::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CBright::Update()
{
#if 0
	// 寿命の半分に到達したら消滅の準備に入る
	if (GetDuration() == GetMaxDuration() * 0.5f)
	{
		// 目標サイズを縮小
		SetSizeTarget(VEC3_INIT);

		// カラーを薄黒く
		SetColTarget(XCol(1.0f, 1.0f, 1.0f, 0.0f));
	}
#endif

	// モーションセットの更新処理
	CMotion_Set::Update();
}

//============================================================================
// 描画処理
//============================================================================
void CBright::Draw()
{
	// モーションセットの描画処理
	CMotion_Set::Draw();
}

//============================================================================
// 拡散発生
//============================================================================
void CBright::Generate(D3DXVECTOR3 Pos)
{
#if 0
	// 生成スパンをカウントアップ
	m_nCntGenerateSpan++;

	// 設定された生成スパンに到達で
	if (m_nCntGenerateSpan > SPREAD_SPAN)
	{
		// 生成スパンのカウントをリセット
		m_nCntGenerateSpan = 0;

		// オフセットをコピー
		auto Offset = m_InitParam["Offset"];

		// いくつか生成
		for (WORD wCnt = 0; wCnt < 3; ++wCnt)
		{
			// 渡された座標をランダムにずらす
			Pos += {
				utility::GetRandomValue<float>()* static_cast<float>(Offset),
					utility::GetRandomValue<float>()* static_cast<float>(Offset),
					utility::GetRandomValue<float>()* static_cast<float>(Offset)
			};

			// 星座の生成
			Create(Pos);
		}
	}
#endif
}

//============================================================================
// 
// privateメンバ
// 
//============================================================================

//============================================================================
// 生成
//============================================================================
void CBright::Create(D3DXVECTOR3 Pos)
{
	CBright* pNewInstance = DBG_NEW CBright();

	// 生成失敗
	if (!pNewInstance)
	{
		assert(false && "閃光の生成に失敗");
	}

	// 閃光の初期設定
	pNewInstance->Init();

	{ // パラメータ設定

		// データをキャスト

		// データをセット

	}
}