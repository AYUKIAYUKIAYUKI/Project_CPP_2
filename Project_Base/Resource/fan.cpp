//============================================================================
//
// 扇形 [fan.cpp]
// Author : 福田歩希
//
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "fan.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
//
// publicメンバ
//
//============================================================================

//============================================================================
// 破棄
//============================================================================
void CFan::Release()
{
	if (this != nullptr)
	{
		delete this;
	}
}

//============================================================================
// 更新処理
//============================================================================
bool CFan::DetectInFanRange(D3DXVECTOR3 Pos)
{
	// 扇形の始点から特定座標へのベクトルを計算
	Vec3 Vec = Pos - m_Pos;

	// 範囲内に存在しているか、小数値を切り詰めて精密な判定を行う
	if (static_cast<int>(sqrtf(Vec.x * Vec.x + Vec.z * Vec.z)) <= m_fLength)
	{
		return 1;
	}

	return 0;
}

//============================================================================
// 座標を取得
//============================================================================
const D3DXVECTOR3& CFan::GetPos() const
{
	return m_Pos;
}

//============================================================================
// 座標を設定
//============================================================================
void CFan::SetPos(D3DXVECTOR3 Pos)
{
	m_Pos = Pos;
}

//============================================================================
// 方角を取得
//============================================================================
const float& CFan::GetDirection() const
{
	return m_fDirection;
}

//============================================================================
// 方角を設定
//============================================================================
void CFan::SetDirection(float fDirection)
{
	m_fDirection = fDirection;
}

//============================================================================
// 長さを取得
//============================================================================
const float& CFan::GetLength() const
{
	return m_fLength;
}

//============================================================================
// 長さを設定
//============================================================================
void CFan::SetLength(float fLength)
{
	m_fLength = fLength;
}

//============================================================================
// 範囲を取得
//============================================================================
const float& CFan::GetRange() const
{
	return m_fRange;
}

//============================================================================
// 範囲を設定
//============================================================================
void CFan::SetRange(float fRange)
{
	m_fRange = fRange;
}

//============================================================================
// 生成
//============================================================================
CFan* CFan::Create()
{
	CFan* pNewInstance = DBG_NEW CFan();

	if (!pNewInstance)
	{
		assert(false && "扇形インスタンスの生成に失敗");
	}

	// JSONファイルを読み取り展開
	std::ifstream ifs("Data\\JSON\\fan_parameter.json");

	// ファイルが展開出来ていたら
	if (ifs.good())
	{
		// JSONデータをパース
		JSON Json;
		ifs >> Json;

		// 各種パラメータをデシリアライズ
		pNewInstance->SetDirection(Json["Direction"]);
		pNewInstance->SetLength(Json["Length"]);
		pNewInstance->SetRange(Json["Range"]);
	}
	else
	{
		assert(false && "spline_test.jsonの読み取りに失敗しました");
	}

	return pNewInstance;
}

//============================================================================
// 生成
//============================================================================
CFan* CFan::Create(D3DXVECTOR3 Pos, float fDirection, float fLength, float fRange)
{
	CFan* pNewInstance = DBG_NEW CFan();

	if (!pNewInstance)
	{
		assert(false && "扇形インスタンスの生成に失敗");
	}

	// パラメータを反映
	pNewInstance->SetPos(Pos);
	pNewInstance->SetDirection(fDirection);
	pNewInstance->SetLength(fLength);
	pNewInstance->SetRange(fRange);

	return pNewInstance;
}

//============================================================================
//
// privateメンバ
//
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CFan::CFan() :
	m_Pos{ VEC3_INIT },
	m_fDirection{ 0.0f },
	m_fLength{ 0.0f },
	m_fRange{ 0.0f }
{

}

//============================================================================
// デストラクタ
//============================================================================
CFan::~CFan()
{

}