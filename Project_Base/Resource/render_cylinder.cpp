//============================================================================
// 
// シリンダー表示 [render_cylinder.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "render_cylinder.h"
#include "object_X.h"

// デバイス取得用
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// 描画優先度指定コンストラクタ
//============================================================================
CRender_Cylinder::CRender_Cylinder(LAYER Priority) :
	CRender_Collision{ Priority },
	m_pCylinder{ CObject_X::Create(Priority, CModel_X_Manager::TYPE::RENDER_CYLINDER) }
{

}

//============================================================================
// デストラクタ
//============================================================================
CRender_Cylinder::~CRender_Cylinder()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CRender_Cylinder::Init()
{
	// 判定表示の初期設定
	if (FAILED(CRender_Collision::Init()))
	{
		return E_FAIL;
	}

	// 表示の透明度を設定
	m_pCylinder->SetAlpha(0.5f);

	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CRender_Cylinder::Uninit()
{
	// 判定表示の終了処理
	CRender_Collision::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CRender_Cylinder::Update()
{
	// 判定のサイズに合わせてスケールを拡大
	const float& fRad = m_pRef->GetRadius(), fHeight = m_pRef->GetHeight();
	const Vec3& Scale = { fRad, fHeight, fRad };
	m_pCylinder->SetScale(Scale);

	// オブジェクトの座標に判定を表示
	m_pCylinder->SetPos(m_pRef->GetPos());
}

//============================================================================
// 描画処理
//============================================================================
void CRender_Cylinder::Draw()
{

}

//============================================================================
// モデルを変更
//============================================================================
void CRender_Cylinder::ChangeModel(CModel_X_Manager::TYPE Type)
{
	m_pCylinder->BindModel(Type);
}

//============================================================================
// 生成
//============================================================================
CRender_Cylinder* CRender_Cylinder::Create(CObject_X* pRef)
{
	// 判定表示を生成
	CRender_Cylinder* pRender_Collision = DBG_NEW CRender_Cylinder(LAYER::FRONT);

	// 生成失敗
	if (pRender_Collision == nullptr)
	{
		assert(false && "シリンダー表示の生成に失敗しました");
	}

	// 判定表示の初期設定
	pRender_Collision->Init();

	// 対象オブジェクトの設定
	pRender_Collision->SetRefObj(pRef);

	return pRender_Collision;
}