//============================================================================
// 
// 判定表示 [render_collision.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "render_collision.h"
#include "object_X.h"

// デバイス取得用
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace abbr;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// 描画優先度指定コンストラクタ
//============================================================================
CRender_Collision::CRender_Collision(LAYER Priority) :
	CObject{ Priority },
	m_CenterSyncPos{ VEC3_INIT },
	m_pRef{ nullptr }
{
	// ワールド行列の初期化
	D3DXMatrixIdentity(&m_MtxWorld);
}

//============================================================================
// デストラクタ
//============================================================================
CRender_Collision::~CRender_Collision()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CRender_Collision::Init()
{
	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CRender_Collision::Uninit()
{

}

//============================================================================
// 更新処理
//============================================================================
void CRender_Collision::Update()
{
	// ワールド行列の設定
	SetMtxWorld();
}

//============================================================================
// 中心点を設定
//============================================================================
void CRender_Collision::SetCenterSyncPos(D3DXVECTOR3 Pos)
{
	m_CenterSyncPos = Pos;
}

//============================================================================
// 対象オブジェクトの設定
//============================================================================
void CRender_Collision::SetRefObj(CObject_X* pRef)
{
	m_pRef = pRef;
}

//============================================================================
// 
// privateメンバ
// 
//============================================================================

//============================================================================
// ワールド行列設定
//============================================================================
void CRender_Collision::SetMtxWorld()
{
	// 計算用行列
	D3DXMATRIX mtxTrans;

	// ワールド行列を初期化
	D3DXMatrixIdentity(&m_MtxWorld);

	if (m_pRef != nullptr)
	{ // 対象オブジェクトが設定されていたら

		// 平行移動行列作成
		D3DXMatrixTranslation(&mtxTrans,
			m_pRef->GetPos().x,
			m_pRef->GetPos().y,
			m_pRef->GetPos().z);
	}
	else
	{ // 対象オブジェクトが設定されていない
		
		// 平行移動行列作成
		D3DXMatrixTranslation(&mtxTrans,
			m_CenterSyncPos.x,
			m_CenterSyncPos.y,
			m_CenterSyncPos.z);
	}

	// 平行移動行列との掛け算
	D3DXMatrixMultiply(&m_MtxWorld,
		&m_MtxWorld,
		&mtxTrans);
}