//============================================================================
// 
// プレイヤー [player.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "player.h"

// インプット取得
#include "manager.h"

// デバッグ表示用
#include "renderer.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace player;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// デフォルトコンストラクタ
//============================================================================
CPlayer::CPlayer() :
	CObject_X(static_cast<int>(CObject::LAYER::MIDDLE)),
	m_PosTarget{ Vec3(0.0f, 0.0f, 0.0f) }
{

}

//============================================================================
// デストラクタ
//============================================================================
CPlayer::~CPlayer()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CPlayer::Init()
{
	// 基底クラスの初期設定
	HRESULT hr = CObject_X::Init();

	if (FAILED(hr))
	{
		assert(false && "プレイヤークラスの初期設定に失敗");
	}

	return hr;
}

//============================================================================
// 終了処理
//============================================================================
void CPlayer::Uninit()
{
	// 基底クラスの終了処理
	CObject_X::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CPlayer::Update()
{
	// 操作
	Control();

	// 基底クラスの更新処理
	CObject_X::Update();

#ifdef _DEBUG
	CRenderer::GetInstance()->SetDebugString("プレイヤー座標 : " + to_string(GetPos().x) + " :  " + to_string(GetPos().y) + " : " + to_string(GetPos().z));
#endif // _DEBUG
}

//============================================================================
// 描画処理
//============================================================================
void CPlayer::Draw()
{
	// 基底クラスの描画処理
	CObject_X::Draw();
}

//============================================================================
// 目標座標を取得
//============================================================================
Vec3 CPlayer::GetPosTarget() const
{
	return m_PosTarget;
}

//============================================================================
// 目標座標を設定
//============================================================================
void CPlayer::SetPosTarget(Vec3 PosTarget)
{
	m_PosTarget = PosTarget;
}

//============================================================================
// 生成
//============================================================================
CPlayer* CPlayer::Create()
{
	// インスタンスを生成
	CPlayer* pNewInstance = DBG_NEW CPlayer();

	// タイプを設定
	pNewInstance->SetType(TYPE::PLAYER);
	
	// 初期設定
	pNewInstance->Init();

	// モデルを設定
	pNewInstance->BindModel(CModel_X_Manager::TYPE::SAMUS);

	return pNewInstance;
}

//============================================================================
// 
// privateメンバ
// 
//============================================================================

//============================================================================
// 操作
//============================================================================
void CPlayer::Control()
{
	// インプット系取得
	CInputKeyboard* pKeyboard = CManager::GetKeyboard();	// キーボード
	CInputPad* pPad = CManager::GetPad();					// パッド

	/* お試し */
	static float f角度 = D3DX_PI * -0.5f;
	CRenderer::GetInstance()->SetDebugString("プレイヤー座標の角度" + to_string(f角度));

	float f増加量 = 0.025f;

	// X軸の入力
	if (pKeyboard->GetPress(DIK_A) || pPad->GetPress(CInputPad::JOYKEY::LEFT))
	{
		f角度 += -f増加量;
	}
	else if (pKeyboard->GetPress(DIK_D) || pPad->GetPress(CInputPad::JOYKEY::RIGHT))
	{
		f角度 += f増加量;
	}

	/* 角度制限 -> 治せ */
	if (f角度 > D3DX_PI)
	{
		f角度 += -D3DX_PI * 2.0f;
	}
	else if (f角度 < -D3DX_PI)
	{
		f角度 += D3DX_PI * 2.0f;
	}

	// 座標を反映
	Vec3 NewPos = Vec3(0.0f, 0.0f, 0.0f);
	float f反映量 = 150.0f;
	NewPos.x = cosf(f角度) * f反映量;
	NewPos.z = sinf(f角度) * f反映量;
	SetPos(NewPos);

	// 向きを反映
	Vec3 NewRot = Vec3(0.0f, 0.0f, 0.0f);
	NewRot.y = -f角度;
	SetRot(NewRot);
}