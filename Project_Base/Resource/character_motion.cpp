////============================================================================
////
//// キャラクター [character.cpp]
//// Author : 福田歩希
////
////============================================================================
//
////****************************************************
//// インクルードファイル
////****************************************************
//#include "character.h"
//
//#include "field_manager.h"
//
////****************************************************
//// usingディレクティブ
////****************************************************
//using namespace abbr;
//
////============================================================================
//// 
//// publicメンバ
//// 
////============================================================================
//
////============================================================================
//// コンストラクタ
////============================================================================
//CCharacter::CCharacter() :
//	CObject_X{ LAYER::BG },
//	m_fCorrectCoef{ 0.0f },
//	m_fOldDirection{ 0.0f },
//	m_fDirection{ 0.0f },
//	m_fMoveSpeed{ 0.0f },
//	m_RotTarget{ VEC3_INIT },
//	m_PosTarget{ VEC3_INIT },
//	m_fVelY{ 0.0f },
//	m_nLife{ 0 }
//{
//
//}
//
////============================================================================
//// デストラクタ
////============================================================================
//CCharacter::~CCharacter()
//{
//
//}
//
////============================================================================
//// 初期設定
////============================================================================
//HRESULT CCharacter::Init()
//{
//	// Xオブジェクトの初期設定
//	if (FAILED(CObject_X::Init()))
//	{
//		return E_FAIL;
//	}
//
//	return S_OK;
//}
//
////============================================================================
//// 終了処理
////============================================================================
//void CCharacter::Uninit()
//{
//	// Xオブジェクトの終了処理
//	CObject_X::Uninit();
//}
//
////============================================================================
//// 更新処理
////============================================================================
//void CCharacter::Update()
//{
//	// 目標値への補正
//	CorrectToTarget();
//
//	// 体力の調整
//	AdjustLife();
//
//	// Xオブジェクトの更新処理
//	CObject_X::Update();
//
//	m_fOldDirection = m_fDirection;
//}
//
////============================================================================
//// 描画処理
////============================================================================
//void CCharacter::Draw()
//{
//	// Xオブジェクトの描画処理
//	CObject_X::Draw();
//}
//
////============================================================================
//// 補正強度を設定
////============================================================================
//void CCharacter::SetCorrectCoef(float fCoef)
//{
//	m_fCorrectCoef = fCoef;
//}
//
////============================================================================
//// 過去の方角を取得
////============================================================================
//const float& CCharacter::GetOldDirection() const
//{
//	return m_fOldDirection;
//}
//
////============================================================================
//// 方角を取得
////============================================================================
//const float& CCharacter::GetDirection() const
//{
//	return m_fDirection;
//}
//
////============================================================================
//// 方角を設定
////============================================================================
//void CCharacter::SetDirection(float fDirection)
//{
//	m_fDirection = fDirection;
//}
//
////============================================================================
//// 移動速度を取得
////============================================================================
//const float& CCharacter::GetMoveSpeed() const
//{
//	return m_fMoveSpeed;
//}
//
////============================================================================
//// 移動速度を設定
////============================================================================
//void CCharacter::SetMoveSpeed(float fMoveSpeed)
//{
//	m_fMoveSpeed = fMoveSpeed;
//}
//
////============================================================================
//// 目標向きを取得
////============================================================================
//const D3DXVECTOR3& CCharacter::GetRotTarget() const
//{
//	return m_RotTarget;
//}
//
////============================================================================
//// 目標向きを設定
////============================================================================
//void CCharacter::SetRotTarget(D3DXVECTOR3 RotTarget)
//{
//	m_RotTarget = RotTarget;
//}
//
////============================================================================
//// 目標座標を取得
////============================================================================
//const D3DXVECTOR3& CCharacter::GetPosTarget() const
//{
//	return m_PosTarget;
//}
//
////============================================================================
//// 目標座標を設定
////============================================================================
//void CCharacter::SetPosTarget(D3DXVECTOR3 PosTarget)
//{
//	m_PosTarget = PosTarget;
//}
//
////============================================================================
//// Y軸の加速度を取得
////============================================================================
//const float& CCharacter::GetVelY() const
//{
//	return m_fVelY;
//}
//
////============================================================================
//// Y軸の加速度を設定
////============================================================================
//void CCharacter::SetVelY(float fVelY)
//{
//	m_fVelY = fVelY;
//}
//
////============================================================================
//// 体力を取得
////============================================================================
//const int& CCharacter::GetLife() const
//{
//	return m_nLife;
//}
//
////============================================================================
//// 体力を設定
////============================================================================
//void CCharacter::SetLife(int nLife)
//{
//	m_nLife = nLife;
//}
//
////============================================================================
//// 
//// protectedメンバ
//// 
////============================================================================
//
////============================================================================
//// 目標値への補正
////============================================================================
//void CCharacter::CorrectToTarget()
//{
//	// 目標向きへ補正
//	Vec3 NewRot = GetRot();
//	utility::AdjustAngle(NewRot.y, m_RotTarget.y);	// 角度の差を補正
//	NewRot += (m_RotTarget - NewRot) * m_fCorrectCoef;
//	SetRot(NewRot);
//
//	// 目標座標へ移動
//	Vec3 NewPos = GetPos();
//	NewPos += (m_PosTarget - NewPos) * m_fCorrectCoef;
//	SetPos(NewPos);
//}
//
////============================================================================
//// 体力の調整
////============================================================================
//void CCharacter::AdjustLife()
//{
//	// 最低値を下回らないように調整
//	if (m_nLife < 0)
//	{
//		m_nLife = 0;
//	}
//}
//
////============================================================================
//// 目標向きを移動方向から自動で設定
////============================================================================
//void CCharacter::AutoSetRotTarget()
//{
//	const Vec3& MoveVec = m_PosTarget - GetPos();	// 移動方向のベクトルを作成
//	m_RotTarget.y = atan2f(-MoveVec.x, -MoveVec.z);	// 目標向きを移動方向に
//}
//
////============================================================================
//// 目標座標を方角から自動で設定
////============================================================================
//void CCharacter::AutoSetPosTarget()
//{
//	m_PosTarget.x = cosf(m_fDirection) * CField_Manager::FIELD_RADIUS;	// X方向の座標を設定
//	m_PosTarget.z = sinf(m_fDirection) * CField_Manager::FIELD_RADIUS;	// Z方向の座標を設定
//}